// Generated by jextract

package myscalalib_bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class interface_h {

    interface_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;

    private static class myscalalib_exports {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            interface_h.C_INT,
            interface_h.C_INT,
            interface_h.C_INT
        );

        public static final MemorySegment ADDR = interface_h.findOrThrow("myscalalib_exports");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int myscalalib_exports(int i, int r)
     * }
     */
    public static FunctionDescriptor myscalalib_exports$descriptor() {
        return myscalalib_exports.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int myscalalib_exports(int i, int r)
     * }
     */
    public static MethodHandle myscalalib_exports$handle() {
        return myscalalib_exports.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int myscalalib_exports(int i, int r)
     * }
     */
    public static MemorySegment myscalalib_exports$address() {
        return myscalalib_exports.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int myscalalib_exports(int i, int r)
     * }
     */
    public static int myscalalib_exports(int i, int r) {
        var mh$ = myscalalib_exports.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("myscalalib_exports", i, r);
            }
            return (int)mh$.invokeExact(i, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class myscalalib_complex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            interface_h.C_INT,
            interface_h.C_POINTER,
            interface_h.C_POINTER
        );

        public static final MemorySegment ADDR = interface_h.findOrThrow("myscalalib_complex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void myscalalib_complex(int times, myscalalib_struct *clamp, char *result)
     * }
     */
    public static FunctionDescriptor myscalalib_complex$descriptor() {
        return myscalalib_complex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void myscalalib_complex(int times, myscalalib_struct *clamp, char *result)
     * }
     */
    public static MethodHandle myscalalib_complex$handle() {
        return myscalalib_complex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void myscalalib_complex(int times, myscalalib_struct *clamp, char *result)
     * }
     */
    public static MemorySegment myscalalib_complex$address() {
        return myscalalib_complex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void myscalalib_complex(int times, myscalalib_struct *clamp, char *result)
     * }
     */
    public static void myscalalib_complex(int times, MemorySegment clamp, MemorySegment result) {
        var mh$ = myscalalib_complex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("myscalalib_complex", times, clamp, result);
            }
            mh$.invokeExact(times, clamp, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ScalaNativeInit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            interface_h.C_INT    );

        public static final MemorySegment ADDR = interface_h.findOrThrow("ScalaNativeInit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ScalaNativeInit()
     * }
     */
    public static FunctionDescriptor ScalaNativeInit$descriptor() {
        return ScalaNativeInit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ScalaNativeInit()
     * }
     */
    public static MethodHandle ScalaNativeInit$handle() {
        return ScalaNativeInit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ScalaNativeInit()
     * }
     */
    public static MemorySegment ScalaNativeInit$address() {
        return ScalaNativeInit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ScalaNativeInit()
     * }
     */
    public static int ScalaNativeInit() {
        var mh$ = ScalaNativeInit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ScalaNativeInit");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

